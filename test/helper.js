// Generated by CoffeeScript 1.9.0
(function() {
  var Adapter, Danger, Helper, Path, Response, Robot, TextMessage, Url, User,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  Url = require('url');

  Path = require('path');

  Robot = require('../src/robot');

  Adapter = require('../src/adapter');

  User = require('../src/user');

  Response = require('../src/response');

  TextMessage = require('../src/message').TextMessage;

  Helper = (function(_super) {
    __extends(Helper, _super);

    function Helper(scripts) {
      Helper.__super__.constructor.call(this, scripts, Danger, null, true, 'helper');
      this.id = 1;
      this.Response = Helper.Response;
      this.sent = [];
      this.recipients = [];
      this.alias = 'alias';
    }

    Helper.prototype.stop = function() {
      return process.exit(0);
    };

    Helper.prototype.run = function() {
      return Helper.__super__.run.call(this).then((function(_this) {
        return function() {
          _this.server = require('http').createServer(function(req, res) {
            return res.end('static');
          });
          _this.server.listen(9001);
          return _this.server.on('close', function() {
            return _this.close();
          });
        };
      })(this));
    };

    Helper.prototype.reset = function() {
      this.sent = [];
      return this.recipients = [];
    };

    return Helper;

  })(Robot);

  Danger = (function(_super) {
    __extends(Danger, _super);

    function Danger() {
      return Danger.__super__.constructor.apply(this, arguments);
    }

    Danger.prototype.send = function() {
      var string, strings, user, _i, _len;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.robot.sent.push.apply(this.robot.sent, strings);
      for (_i = 0, _len = strings.length; _i < _len; _i++) {
        string = strings[_i];
        this.robot.recipients.push(user);
      }
      return typeof this.cb === "function" ? this.cb.apply(this, strings) : void 0;
    };

    Danger.prototype.reply = function() {
      var str, strings, user, _i, _len, _results;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _results = [];
      for (_i = 0, _len = strings.length; _i < _len; _i++) {
        str = strings[_i];
        _results.push(this.send(user, this.robot.name + ": " + str));
      }
      return _results;
    };

    Danger.prototype.receive = function(text) {
      var user;
      if (typeof text === 'string') {
        user = new User(1, {
          name: 'helper'
        });
        return Danger.__super__.receive.call(this, new TextMessage(user, text));
      } else {
        return Danger.__super__.receive.call(this, text);
      }
    };

    return Danger;

  })(Adapter);

  if (!process.env.BROBBOT_LIVE) {
    Helper.Response = (function(_super) {
      __extends(Response, _super);

      function Response() {
        return Response.__super__.constructor.apply(this, arguments);
      }


      /*
       * This changes ever HTTP request to hit the danger server above
       */

      Response.prototype.http = function(url) {
        return Response.__super__.http.call(this, url).host('127.0.0.1').port(9001);
      };

      return Response;

    })(Response);
  }

  module.exports = new Helper(['../test/scripts/test']);

  module.exports.run();

}).call(this);
